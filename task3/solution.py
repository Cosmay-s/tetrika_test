"""Когда пользователь заходит на страницу урока, мы сохраняем время его захода.
   Когда пользователь выходит с урока (или закрывает вкладку, браузер – в общем как-то разрывает соединение с сервером),
   мы фиксируем время выхода с урока. Время присутствия каждого пользователя на уроке хранится у нас в виде интервалов.
   В функцию передается словарь, содержащий три списка с таймстемпами (время в секундах):
   lesson – начало и конец урока
   pupil – интервалы присутствия ученика
   tutor – интервалы присутствия учителя
   Интервалы устроены следующим образом – это всегда список из четного количества элементов.
   Под четными индексами (начиная с 0) время входа на урок, под нечетными - время выхода с урока.
   Нужно написать функцию appearance, которая получает на вход словарь с интервалами и возвращает время общего присутствия ученика и учителя на уроке (в секундах).
"""

from typing import List, Dict, Tuple


def appearance(intervals: Dict[str, List[int]]) -> int:
    """
    Вычисляет общее количество секунд, когда и ученик, и преподаватель одновременно
    находились на онлайн-уроке.

    Параметры:
    - intervals: словарь с тремя ключами:
        - 'lesson': [start, end] — начало и конец урока (timestamp в секундах)
        - 'pupil': список пар [вход1, выход1, вход2, выход2, ...] — интервалы активности ученика
        - 'tutor': список пар [вход1, выход1, вход2, выход2, ...] — интервалы активности преподавателя

    Возвращает:
    - Общее количество секунд (int), в течение которых ученик и преподаватель
      одновременно присутствовали в пределах урока.
    """
    lesson: List[int] = intervals['lesson']
    pupil: List[int] = intervals['pupil']
    tutor: List[int] = intervals['tutor']

    events: List[Tuple[int, str, int]] = []

    # Добавляем события (вход/выход) ученика, обрезая по границам урока
    for i in range(0, len(pupil), 2):
        start = max(pupil[i], lesson[0])
        end = min(pupil[i + 1], lesson[1])
        if start < end:
            events.append((start, 'pupil', 1))  # вход
            events.append((end, 'pupil', -1))   # выход

    # То же самое для преподавателя
    for i in range(0, len(tutor), 2):
        start = max(tutor[i], lesson[0])
        end = min(tutor[i + 1], lesson[1])
        if start < end:
            events.append((start, 'tutor', 1))  # вход
            events.append((end, 'tutor', -1))   # выход

    # Сортируем все события по времени
    events.sort()

    pupil_online: int = 0
    tutor_online: int = 0
    prev_time: int = 0
    total_time: int = 0

    # Проходим по всем событиям, отслеживаем, кто онлайн
    for time, who, action in events:
        # Если оба были онлайн до текущего события, считаем разницу
        if pupil_online > 0 and tutor_online > 0:
            total_time += time - prev_time

        # Обновляем состояние: вход увеличивает счётчик, выход уменьшает
        if who == 'pupil':
            pupil_online += action
        else:  # tutor
            tutor_online += action

        # Запоминаем текущее время как предыдущее
        prev_time = time

    return total_time


# Тесты
tests = [
    {'intervals': {'lesson': [1594663200, 1594666800],
             'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
             'tutor': [1594663290, 1594663430, 1594663443, 1594666473]},
     'answer': 3117
    },
    {'intervals': {'lesson': [1594702800, 1594706400],
             'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513, 1594704564, 1594705150, 1594704581, 1594704582, 1594704734, 1594705009, 1594705095, 1594705096, 1594705106, 1594706480, 1594705158, 1594705773, 1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503, 1594706524, 1594706524, 1594706579, 1594706641],
             'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]},
    'answer': 3577
    },
    {'intervals': {'lesson': [1594692000, 1594695600],
             'pupil': [1594692033, 1594696347],
             'tutor': [1594692017, 1594692066, 1594692068, 1594696341]},
    'answer': 3565
    },
]


if __name__ == '__main__':
   for i, test in enumerate(tests):
       test_answer = appearance(test['intervals'])
       assert test_answer == test['answer'], f'Error on test case {i}, got {test_answer}, expected {test["answer"]}'
